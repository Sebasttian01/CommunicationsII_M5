id: b_sampler_cc
label: b_sampler_cc
category: '[comdiguis]'

parameters:
-   id: DelayDiez
    label: DelayDiez
    dtype: raw
    default: '0'
    hide: none
-   id: Sps
    label: Sps
    dtype: raw
    default: '1'
    hide: none

inputs:
-   label: in
    dtype: complex
    vlen: 1

outputs:
-   label: diezmado
    dtype: complex
    vlen: 1
    optional: true
-   label: out
    dtype: complex
    vlen: 1

templates:
    imports: 'from b_sampler_cc import b_sampler_cc  # grc-generated hier_block'
    make: "b_sampler_cc(\n    DelayDiez=${ DelayDiez },\n    Sps=${ Sps },\n)"
    callbacks:
    - set_DelayDiez(${ DelayDiez })
    - set_Sps(${ Sps })

documentation: 'Homero Ortega Boada. Universidad Industrial de Santander

    Hace lo mismo que el b_sampler, pero con senales complejas. Por una salida entrega
    la senal diezmada y por la otra muestreada. El diezmado se realiza  de la manera
    en que se explica el diezmado en el libro de Tratamiento de Senales y Sistemas
    de Oppenheim. En ese diezmado se igualan a cero periodicamente un grupo de muestras.
    El muestreo, que se entrega en la otra salida de este bloque es similar al diezmado,
    pero las muestras que se igualan a cero son anuladas, es decir, desaparecen de
    la senal. Por esa razon, la rata de muestreo de la senal diezmada es la misma
    de la que entra al bloque, pero la rata de muestreo de la senal muestreada es
    Sps veces menor.

    /home/comu2_grupoc1/.local/state/gnuradio/b_sampler_cc.py'
grc_source: /home/comu2_grupoc1/CommunicationsII_M5/comdig_Lib_Bloques.3.8-master/BloquesDependientes/b_sampler_cc.grc

file_format: 1
